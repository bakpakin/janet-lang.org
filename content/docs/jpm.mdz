{:title "jpm"
 :template "docpage.html"
 :order 23}
---

Most default installs of Janet come with a build tool, @code`jpm`, that makes
managing dependencies, building Janet code, and distributing Janet applications
easy. While @code`jpm` is not required by Janet, it is a very handy build tool
that removes much of the boilerplate for creating new Janet projects, and is
updated in step with Janet. @code`jpm` also works on Windows, Linux, and macOS
so you don't need to write multiple build scripts and worry about platform
quirks to make your scripts, binaries, and applications cross-platform.

@p{@code`jpm`'s main functions are installing dependencies and building native
    Janet modules, but it is meant to be used for much of the life-cycle for
    Janet projects. Since Janet code doesn't usually need to be compiled, you
    don't always need @code`jpm`, especially for scripts, but @code`jpm` comes
    with some functionality that is difficult to duplicate, like compiling Janet
    source code and all imported modules into a statically linked executable for
    distribution.
}

## Glossary

A self contained unit of Janet source code as recognized by @code`jpm` is called
a project. A project is a directory containing a @code`project.janet` file,
which contains build recipes. Often, a project will correspond to a single git
repository, and contain a single library. However, a project's
@code`project.janet` file can contain build recipes for as many libraries,
native extensions, and executables as it wants. Each of these recipes builds an
artifact. Artifacts are the output files that will either be distributed or
installed on the end-user or developer's machine.

## Building projects with @code`jpm`

Once you have the project on your machine, building the various artifacts should
be pretty simple.

#### Global install

@codeblock```
sudo jpm deps
jpm build
jpm test
sudo jpm install
```

\(On Windows, @code`sudo` is not required. Use of @code`sudo` on POSIX systems
depends on whether you installed @code`janet` to a directory owned by the root
user.)

#### Local install

@codeblock```
export JANET_PATH=/home/me/janet
jpm deps
jpm build
jpm test
jpm install
```

### Dependencies

@p{@code`jpm deps` is a command that installs Janet libraries that the project
    depends on recursively.  It will automatically fetch, build, and install all
    required dependencies for you.  As of August 2019, this only works with git,
    which you need to have installed on your machine to install dependencies. If
    you don't have git you are free to manually obtain the requisite
    dependencies and install them manually with @code`sudo jpm install`.
}

### Building

Next, we use the @code`jpm build` command to build artifacts. All built
artifacts will be created in the @code`build` subdirectory of the current
project. Therefore, it is probably a good idea to exclude the @code`build`
directory from source control. For building executables and native modules, you
will need to have a C compiler on your PATH where you run @code`jpm build`. For
POSIX systems, the compiler is @code`cc`.

If you make changes to the source code after building once, @code`jpm` will try
to only rebuild what is needed on a rebuild. If this fails for any reason, you
can delete the entire build directory with @code`jpm clean` to reset things.

#### Windows

For Windows, the C compiler used by @code`jpm` is @code`cl.exe`, which is part
of MSVC. You can get it with Visual Studio, or standalone with the C and C++
Build Tools from Microsoft. You will then need to run @code`jpm build` in a
Developer Command Prompt, or source @code`vcvars64.bat` in your shell to add
@code`cl.exe` to the PATH.

### Testing

Once we have built our software, it is a good idea to test it to verify that it
works on the current machine. @code`jpm test` will run all Janet scripts in the
@code`test` directory of the project and return a non-zero exit code if any
fail.

### Installing

Finally, once we have built our software and tested that it works, we can
install it on our system. For an executable, this means copying it to the
@code`bin` directory, and for libraries it means copying them to the global
syspath. You can optionally install into any directory if you don't want to
pollute your system or you don't have permission to write to the directory where
@code`janet` itself was installed.  You can specify the path to install modules
to via the @code`--modpath` option, and the path to install binaries to with the
@code`--binpath` option. These need to be given before the subcommand
@code`install`.

## The @code`project.janet` file

To create your own software in Janet, it is a good idea to understand what the
@code`project.janet` file is and how it defines rules for building, testing, and
installing software. The code in @code`project.janet` is normal Janet source
code that is run in a special environment.

A @code`project.janet` file is loaded by @code`jpm` and evaluated to create
various recipes, or rules. For example, @code`declare-project` creates several
rules, including @code`"install"`, @code`"build"`, @code`"clean"`, and
@code`"test"`. These are a few of the rules that @code`jpm` expects
@code`project.janet` to create when executed.

### Declaring a project

Use the @code`declare-project` as the first @code`declare-` macro towards the
beginning of your @code`project.janet` file. You can also pass in any metadata
about your project that you want, and add dependencies on other Janet projects
here.

@codeblock[janet]```
(declare-project
  :name "mylib" # required
  :description "a library that does things" # some example metadata.

  # Optional urls to git repositories that contain required artifacts.
  :dependencies ["https://github.com/janet-lang/json.git"])
```

### Creating a module

A 100% Janet library is the easiest kind of software to distribute in Janet.
Since it does not need to be built and since installing it means simply moving
the files to a system directory, we only need to specify the files that comprise
the library in @code`project.janet`.

@codeblock[janet]```
(declare-source
  # :source is an array or tuple that can contain
  # source files and directories that will be installed.
  # Often will just be a single file or single directory.
  :source ["mylib.janet"])
```

For information on writing modules, see @link[/docs/modules.html]{the modules docpage}.

### Creating a native module

Once you have written your C code that defines your native module (see the
@link[/capi/embedding.html]{embedding} page on how to do this), you must declare
it in @code`project.janet` in order for @code`jpm` to build the native modules
for you.

@codeblock[janet]```
(declare-native
 :name "mynative"
 :source ["mynative.c" "mysupport.c"]
 :embedded ["extra-functions.janet"])
```

This makes @code`jpm` create a native module called @code`mynative` when
@code`jpm build` is run, the arguments for which should be pretty
straightforward. The @code`:embedded` argument is Janet source code that will be
embedded as an array of bytes directly into the C source code. It is not
recommended to use the @code`:embedded` argument, as one can simply create
multiple artifacts, one for a pure C native module and one for Janet source
code.

### Creating an executable

The declaration for an executable file is pretty simple.

@codeblock[janet]```
(declare-executable
 :name "myexec"
 :entry "main.janet"
 :install true)
```

@p{@code`jpm` is smart enough to figure out from the one entry file what
    libraries and other code your executable depends on, and bundles them into
    the final application for you. The final executable will be located at
    @code`build/myexec`, or @code`build\myexec.exe` on Windows.}

If the optional key-value pair `:install true` is specified in the
@code`declare-executable` form, by default, the appropriate @code`jpm install`
command will install the resulting executable to @code`JANET_BINPATH` (but see
the jpm man page for further details).

Also note that the entry of an executable file should look different than a
normal Janet script.  It should define a @code`main` function that can receive a
variable number of parameters, the command-line arguments. It will be called as
the entry point to your executable.

@codeblock[janet]```
(import mylib1)
(import mylib2)

# This will be printed when you run `jpm build`
(print "build time!")

(defn main [& args]
    # You can also get command-line arguments through (dyn :args)
    (print "args: " ;(interpose ", " args))
    (mylib1/do-thing)
    (mylib2/do-thing))
```

It's important to remember that code at the top level will run when you invoke
@code`jpm build`, not at executable runtime. This is because in order to create
the executable, we marshal the @code`main` function of the app and write it to
an image. In order to create the main function, we need to actually compile and
run everything that it references, in the above case @code`mylib1` and
@code`mylib2`.

This has a number of benefits, but the largest is that we only include bytecode
for the functions that our application uses. If we only use one function from a
library of 1000 functions, our final executable will not include the bytecode
for the other 999 functions (unless our one function references some of those
other functions, of course). This feature, called tree-shaking, only works
for Janet code. Native modules will be linked to the final executable statically
in full if they are used at all. A native module is considered "used" if is
imported at any time during @code`jpm build`. This may change, but it is
currently the most reliable way to check if a native modules needs to be linked
into the final executable.

There are some limitations to this approach. Any dynamically required modules
will not always be linked into the final executable. If @code`require` or
@code`import` is not called during @code`jpm build`, then the code will not be
linked into the executable. The module can still be required if it is available
at runtime, though.

For an example Janet executable built with @code`jpm`, see
@link[https://github.com/bakpakin/littleserver][https://github.com/bakpakin/littleserver].
